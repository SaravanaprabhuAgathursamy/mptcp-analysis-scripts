#! /usr/bin/python
# -*- coding: utf-8 -*-
#
#  Copyright 2015 Quentin De Coninck
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#  To install on this machine: matplotlib, numpy

from __future__ import print_function

import argparse
import matplotlib
# Do not use any X11 backend
matplotlib.use('Agg')
matplotlib.rcParams['pdf.fonttype'] = 42
matplotlib.rcParams['ps.fonttype'] = 42
import matplotlib.pyplot as plt
import numpy as np
import os
import sys

# Add root directory in Python path and be at the root
ROOT_DIR = os.path.abspath(os.path.join(".", os.pardir))
os.chdir(ROOT_DIR)
sys.path.append(ROOT_DIR)

import common as co
import common_graph as cog
import mptcp
import tcp

##################################################
##                  ARGUMENTS                   ##
##################################################

parser = argparse.ArgumentParser(
    description="Summarize stat files generated by analyze")
parser.add_argument("-s",
                    "--stat", help="directory where the stat files are stored", default=co.DEF_STAT_DIR + '_' + co.DEF_IFACE)
parser.add_argument('-S',
                    "--sums", help="directory where the summary graphs will be stored", default=co.DEF_SUMS_DIR + '_' + co.DEF_IFACE)
parser.add_argument("-d",
                    "--dirs", help="list of directories to aggregate", nargs="+")

args = parser.parse_args()
stat_dir_exp = os.path.abspath(os.path.join(ROOT_DIR, args.stat))
sums_dir_exp = os.path.abspath(os.path.join(ROOT_DIR, args.sums))
co.check_directory_exists(sums_dir_exp)

##################################################
##                 GET THE DATA                 ##
##################################################

# connections = cog.fetch_valid_data(stat_dir_exp, args, filename_match="epload")
# multiflow_connections, singleflow_connections = cog.get_multiflow_connections(connections)

##################################################
##               PLOTTING RESULTS               ##
##################################################

# TODO fill those variables
tcp_topos = ["0_d10b2", "0_d50b2"]
mptcp_topos = ["0_d10b2_1_d10b2", "0_d10b2_1_d50b2", "0_d50b2_1_d50b2"]
sites = ['www.google.pl_', 'www.popads.net_', 'wigetmedia.com_', 'www.chase.com_', 'vk.com_', 'www.outbrain.com_', 'home.mywebsearch.com_',
         'www.bet365.com_en_', 'www.tumblr.com_', 'www.dropbox.com_', 'www.onet.pl_', 'www.google.com.hk_', 'wordpress.org_', 'media.tumblr.com_',
         'www.google.cn_', 'clkmon.com_', 'www.slideshare.net_', 'stackoverflow.com_', 'www.tianya.cn_', 'www.ebay.co.uk_', 'www.tudou.com_',
         'searchnu.com_', 'pinterest.com_', 'adf.ly_', 'www.bankofamerica.com_', 'ask.fm_', 'www.pornhub.com_', 'systweak.com_',
         'www.siteadvisor.com_', 'www.google.co.th_', 'www.dmm.co.jp_', 'www.sohu.com_', 'www.booking.com_', 'www.yahoo.com_', 'www.google.com.eg_',
         'www.youtube.com_', 'www.reddit.com_', 'www.letv.com_', 'www.bing.com_Passport.aspx?popup=1', 'www.deviantart.com_', 'www.google.com.pk_',
         'www.neobux.com_', 'www.google.com.sa_', 'www.theguardian.com_us', 'www.google.fr_', 'www.livedoor.com_', 'www.zol.com.cn_', 'www.etsy.com_',
         'www.amazon.co.jp_', 'www.google.nl_', 'www.google.ru_', 'www.craigslist.org_about_sites', '58.com_', 'www.uol.com.br_', 'www.soso.com_',
         'www.wikipedia.org_', 'www.tmall.com_', 'www.amazon.co.uk_', 'www.msn.com_', 'www.wellsfargo.com_', 'www.adcash.com_en_index.php',
         'www.ku6.com_', 'www.rakuten.co.jp_', 'www.rediff.com_', 'www.google.de_', 'www.paypal.com_home', 'www.amazon.fr_', 'blogfa.com_',
         'www.google.es_', 'www.google.com.tr_', 'odnoklassniki.ru_', 'aws.amazon.com_', 'www.google.co.in_', 'www.goo.ne.jp_', 'java.com_en_',
         'xinhuanet.com_', 'www.amazon.com_', 'www.baidu.com_', 'www.alipay.com_?src=alipay.com', 'www.mediafire.com_', 'www.tube8.com_',
         'www.google.co.id_', 'www.google.com.vn_', 'www.google.co.uk_', 'chinaz.com_', 'www.aliexpress.com_', 'thepiratebay.sx_', 'www.answers.com_',
         'www.orange.fr_', 'www.google.co.za_', 'www.youku.com_', 'xhamster.com_', 'www.xvideos.com_', 'www.amazon.ca_', 'www.bing.com_',
         'www.leboncoin.fr_', 'baidu.com_', 'www.hao123.com_', 'www.indeed.com_', 'en.softonic.com_mac', 'www.yahoo.co.jp_', 'www.godaddy.com_',
         'ameblo.jp_', 'mail.ru_', 'www.skype.com_en_', 'www.56.com_', 'www.google.com.ar_', 'www.google.com.br_', 'www.amazon.it_', 'espn.go.com_',
         'www.dailymotion.com_us', 'snapdo.com_', 'twitter.com_', 'www.yandex.ru_', 'www.redtube.com_', 'www.apple.com_', 'ifeng.com_',
         'soundcloud.com_', 'www.google.co.jp_', 'www.globo.com_', 'www.jd.com_', 'vimeo.com_', 'www.amazon.es_', '360.cn_', 'www.wikimedia.org_',
         'www.baike.com_', 'ilivid.com_', 'www.liveinternet.ru_', 'go.com_', 'www.yelp.com_seattle', 'www.flickr.com_', 'www.google.com.my_',
         'www.livejournal.com_', 'www.ask.com_', 'www.qq.com_', 'www.nicovideo.jp_', 'www.sogou.com_', 'www.directrev.com_', 'www.google.gr_',
         'wordpress.com_', 'www.google.ca_', 'torrentz.eu_', 'www.ebay.com_', 'www.huffingtonpost.com_', 'instagram.com_', 'cnzz.com_',
         'www.google.com.mx_', 'www.xnxx.com_', 'www.amazon.cn_', 'www.youporn.com_', 'vube.com_', 'www.facebook.com_', 't.co_',
         'sweetim.sweetpacks.com_', 'www.imdb.com_', 'www.ebay.de_', 'www.babylon.com_', 'web.de_', 'www.google.com.au_', 'www.google.com.tw_',
         'www.alibaba.com_', 'kickass.to_', 'www.amazon.de_', 'www.goodgamestudios.com_', 'www.douban.com_', 'www.indeed.com_precache.html',
         'www.flipkart.com_', 'renren.com_', 'www.youjizz.com_', 'www.google.com_']
schedulers = ["default"]

nb_conns_tcp = {}
nb_bytes = {}
nb_conns = {}
nb_bytes_if = {}

INIT = 'initial'
ADDI = 'additional'


def nb_conns_and_bytes(fname, conns, nb_conns_tcp, nb_conns, nb_bytes, nb_bytes_if):
    if fname.startswith("tcp_"):
        shorten_fname = fname[4:]
        for topo in tcp_topos:
            if topo in shorten_fname:
                if topo not in nb_conns_tcp:
                    nb_conns_tcp[topo] = {}
                    nb_bytes[topo] = {}

                for scheduler in schedulers:
                    if scheduler in shorten_fname:
                        if scheduler not in nb_conns_tcp[topo]:
                            nb_conns_tcp[topo][scheduler] = {}
                            nb_bytes[topo][scheduler] = {}

                        for site in sites:
                            if shorten_fname.startswith(site):
                                if site not in nb_conns_tcp[topo][scheduler]:
                                    nb_conns_tcp[topo][scheduler][site] = []
                                    nb_bytes[topo][scheduler][site] = []

                                nb_conns_tcp[topo][scheduler][site].append(len(conns))
                                tot = 0
                                for conn_id, conn in conns.iteritems():
                                    tot += conn.flow.attr[co.S2C].get(co.BYTES, 0)

                                nb_bytes[topo][scheduler][site].append(tot)

                                break

                        break

                break

    elif fname.startswith("mptcp_"):
        shorten_fname = fname[6:]
        for topo in mptcp_topos:
            if topo in shorten_fname:
                if topo not in nb_conns:
                    nb_conns[topo] = {}
                    nb_bytes_if[topo] = {}

                for scheduler in schedulers:
                    if scheduler in shorten_fname:
                        if scheduler not in nb_conns[topo]:
                            nb_conns[topo][scheduler] = {}
                            nb_bytes_if[topo][scheduler] = {}

                        for site in sites:
                            if shorten_fname.startswith(site):
                                if site not in nb_conns[topo][scheduler]:
                                    nb_conns[topo][scheduler][site] = []
                                    nb_bytes_if[topo][scheduler][site] = []

                                nb_conns[topo][scheduler][site].append(len(conns))
                                tot = {INIT: 0, ADDI: 0}
                                for conn_id, conn in conns.iteritems():
                                    for flow_id, flow in conn.flows.iteritems():
                                        ith = INIT if flow.attr[co.IF] == "wifi" else ADDI
                                        tot[ith] += flow.attr[co.S2C].get(co.BYTES, 0)

                                nb_bytes_if[topo][scheduler][site].append(tot)

                                break

                        break

                break


cog.fetch_and_process_data(stat_dir_exp, args, "epload_", nb_conns_and_bytes, nb_conns_tcp, nb_conns, nb_bytes, nb_bytes_if)

# for fname, conns in connections.iteritems():
#     if fname.startswith("tcp_"):
#         shorten_fname = fname[4:]
#         for topo in tcp_topos:
#             if topo in shorten_fname:
#                 if topo not in nb_conns_tcp:
#                     nb_conns_tcp[topo] = {}
#                     nb_bytes[topo] = {}
#
#                 for scheduler in schedulers:
#                     if scheduler in shorten_fname:
#                         if scheduler not in nb_conns_tcp[topo]:
#                             nb_conns_tcp[topo][scheduler] = {}
#                             nb_bytes[topo][scheduler] = {}
#
#                         for site in sites:
#                             if shorten_fname.startswith(site):
#                                 if site not in nb_conns_tcp[topo][scheduler]:
#                                     nb_conns_tcp[topo][scheduler][site] = []
#                                     nb_bytes[topo][scheduler][site] = []
#
#                                 nb_conns_tcp[topo][scheduler][site].append(len(conns))
#                                 tot = 0
#                                 for conn_id, conn in conns.iteritems():
#                                     tot += conn.flow.attr[co.S2C].get(co.BYTES, 0)
#
#                                 nb_bytes[topo][scheduler][site].append(tot)
#
#                                 break
#
#                         break
#
#                 break
#
#     elif fname.startswith("mptcp_"):
#         shorten_fname = fname[6:]
#         for topo in mptcp_topos:
#             if topo in shorten_fname:
#                 if topo not in nb_conns:
#                     nb_conns[topo] = {}
#                     nb_bytes_if[topo] = {}
#
#                 for scheduler in schedulers:
#                     if scheduler in shorten_fname:
#                         if scheduler not in nb_conns[topo]:
#                             nb_conns[topo][scheduler] = {}
#                             nb_bytes_if[topo][scheduler] = {}
#
#                         for site in sites:
#                             if shorten_fname.startswith(site):
#                                 if site not in nb_conns[topo][scheduler]:
#                                     nb_conns[topo][scheduler][site] = []
#                                     nb_bytes_if[topo][scheduler][site] = []
#
#                                 nb_conns[topo][scheduler][site].append(len(conns))
#                                 tot = {INIT: 0, ADDI: 0}
#                                 for conn_id, conn in conns.iteritems():
#                                     for flow_id, flow in conn.flows.iteritems():
#                                         ith = INIT if flow.attr[co.IF] == "wifi" else ADDI
#                                         tot[ith] += flow.attr[co.S2C].get(co.BYTES, 0)
#
#                                 nb_bytes_if[topo][scheduler][site].append(tot)
#
#                                 break
#
#                         break
#
#                 break


print(nb_conns_tcp)
print(nb_conns)
print(nb_bytes_if)
